// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: search_file.proto

package config

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SearchFileClient is the client API for SearchFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SearchFileClient interface {
	Search(ctx context.Context, in *FileRequested, opts ...grpc.CallOption) (*Response, error)
}

type searchFileClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchFileClient(cc grpc.ClientConnInterface) SearchFileClient {
	return &searchFileClient{cc}
}

func (c *searchFileClient) Search(ctx context.Context, in *FileRequested, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/SearchFile/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchFileServer is the server API for SearchFile service.
// All implementations must embed UnimplementedSearchFileServer
// for forward compatibility
type SearchFileServer interface {
	Search(context.Context, *FileRequested) (*Response, error)
	mustEmbedUnimplementedSearchFileServer()
}

// UnimplementedSearchFileServer must be embedded to have forward compatible implementations.
type UnimplementedSearchFileServer struct {
}

func (UnimplementedSearchFileServer) Search(context.Context, *FileRequested) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedSearchFileServer) mustEmbedUnimplementedSearchFileServer() {}

// UnsafeSearchFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearchFileServer will
// result in compilation errors.
type UnsafeSearchFileServer interface {
	mustEmbedUnimplementedSearchFileServer()
}

func RegisterSearchFileServer(s grpc.ServiceRegistrar, srv SearchFileServer) {
	s.RegisterService(&SearchFile_ServiceDesc, srv)
}

func _SearchFile_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequested)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchFileServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SearchFile/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchFileServer).Search(ctx, req.(*FileRequested))
	}
	return interceptor(ctx, in, info, handler)
}

// SearchFile_ServiceDesc is the grpc.ServiceDesc for SearchFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearchFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SearchFile",
	HandlerType: (*SearchFileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _SearchFile_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search_file.proto",
}

// JoinClient is the client API for Join service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JoinClient interface {
	ExecuteJoin(ctx context.Context, in *JoinPeersRequest, opts ...grpc.CallOption) (*Response, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Response, error)
}

type joinClient struct {
	cc grpc.ClientConnInterface
}

func NewJoinClient(cc grpc.ClientConnInterface) JoinClient {
	return &joinClient{cc}
}

func (c *joinClient) ExecuteJoin(ctx context.Context, in *JoinPeersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Join/ExecuteJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *joinClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Join/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JoinServer is the server API for Join service.
// All implementations must embed UnimplementedJoinServer
// for forward compatibility
type JoinServer interface {
	ExecuteJoin(context.Context, *JoinPeersRequest) (*Response, error)
	Join(context.Context, *JoinRequest) (*Response, error)
	mustEmbedUnimplementedJoinServer()
}

// UnimplementedJoinServer must be embedded to have forward compatible implementations.
type UnimplementedJoinServer struct {
}

func (UnimplementedJoinServer) ExecuteJoin(context.Context, *JoinPeersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteJoin not implemented")
}
func (UnimplementedJoinServer) Join(context.Context, *JoinRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedJoinServer) mustEmbedUnimplementedJoinServer() {}

// UnsafeJoinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JoinServer will
// result in compilation errors.
type UnsafeJoinServer interface {
	mustEmbedUnimplementedJoinServer()
}

func RegisterJoinServer(s grpc.ServiceRegistrar, srv JoinServer) {
	s.RegisterService(&Join_ServiceDesc, srv)
}

func _Join_ExecuteJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServer).ExecuteJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Join/ExecuteJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServer).ExecuteJoin(ctx, req.(*JoinPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Join_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JoinServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Join/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JoinServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Join_ServiceDesc is the grpc.ServiceDesc for Join service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Join_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Join",
	HandlerType: (*JoinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteJoin",
			Handler:    _Join_ExecuteJoin_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _Join_Join_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search_file.proto",
}

// FetchClient is the client API for Fetch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchClient interface {
	ExecuteFetch(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*Peers, error)
	Fetch(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*Peers, error)
}

type fetchClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchClient(cc grpc.ClientConnInterface) FetchClient {
	return &fetchClient{cc}
}

func (c *fetchClient) ExecuteFetch(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*Peers, error) {
	out := new(Peers)
	err := c.cc.Invoke(ctx, "/Fetch/ExecuteFetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fetchClient) Fetch(ctx context.Context, in *VoidRequest, opts ...grpc.CallOption) (*Peers, error) {
	out := new(Peers)
	err := c.cc.Invoke(ctx, "/Fetch/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchServer is the server API for Fetch service.
// All implementations must embed UnimplementedFetchServer
// for forward compatibility
type FetchServer interface {
	ExecuteFetch(context.Context, *VoidRequest) (*Peers, error)
	Fetch(context.Context, *VoidRequest) (*Peers, error)
	mustEmbedUnimplementedFetchServer()
}

// UnimplementedFetchServer must be embedded to have forward compatible implementations.
type UnimplementedFetchServer struct {
}

func (UnimplementedFetchServer) ExecuteFetch(context.Context, *VoidRequest) (*Peers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteFetch not implemented")
}
func (UnimplementedFetchServer) Fetch(context.Context, *VoidRequest) (*Peers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedFetchServer) mustEmbedUnimplementedFetchServer() {}

// UnsafeFetchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchServer will
// result in compilation errors.
type UnsafeFetchServer interface {
	mustEmbedUnimplementedFetchServer()
}

func RegisterFetchServer(s grpc.ServiceRegistrar, srv FetchServer) {
	s.RegisterService(&Fetch_ServiceDesc, srv)
}

func _Fetch_ExecuteFetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServer).ExecuteFetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fetch/ExecuteFetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServer).ExecuteFetch(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fetch_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Fetch/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchServer).Fetch(ctx, req.(*VoidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fetch_ServiceDesc is the grpc.ServiceDesc for Fetch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fetch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Fetch",
	HandlerType: (*FetchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteFetch",
			Handler:    _Fetch_ExecuteFetch_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Fetch_Fetch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "search_file.proto",
}
